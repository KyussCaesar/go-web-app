/*
Go Web App

Go Web App 

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IUpdateUserDTO struct for IUpdateUserDTO
type IUpdateUserDTO struct {
	// New value for the user's username. 
	Username *string `json:"username,omitempty"`
	// New value for the user's email. 
	Email *string `json:"email,omitempty"`
}

// NewIUpdateUserDTO instantiates a new IUpdateUserDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIUpdateUserDTO() *IUpdateUserDTO {
	this := IUpdateUserDTO{}
	return &this
}

// NewIUpdateUserDTOWithDefaults instantiates a new IUpdateUserDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIUpdateUserDTOWithDefaults() *IUpdateUserDTO {
	this := IUpdateUserDTO{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IUpdateUserDTO) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IUpdateUserDTO) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IUpdateUserDTO) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *IUpdateUserDTO) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *IUpdateUserDTO) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IUpdateUserDTO) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *IUpdateUserDTO) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *IUpdateUserDTO) SetEmail(v string) {
	o.Email = &v
}

func (o IUpdateUserDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableIUpdateUserDTO struct {
	value *IUpdateUserDTO
	isSet bool
}

func (v NullableIUpdateUserDTO) Get() *IUpdateUserDTO {
	return v.value
}

func (v *NullableIUpdateUserDTO) Set(val *IUpdateUserDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIUpdateUserDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIUpdateUserDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIUpdateUserDTO(val *IUpdateUserDTO) *NullableIUpdateUserDTO {
	return &NullableIUpdateUserDTO{value: val, isSet: true}
}

func (v NullableIUpdateUserDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIUpdateUserDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


