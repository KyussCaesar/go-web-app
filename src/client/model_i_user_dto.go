/*
Go Web App

Go Web App 

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// IUserDTO struct for IUserDTO
type IUserDTO struct {
	// User ID 
	Id string `json:"id"`
	// Username. 
	Username string `json:"username"`
	// User email address. 
	Email string `json:"email"`
	// DB-managed.
	CreatedAt time.Time `json:"createdAt"`
	// DB-managed.
	UpdatedAt time.Time `json:"updatedAt"`
	// DB-managed.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

// NewIUserDTO instantiates a new IUserDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIUserDTO(id string, username string, email string, createdAt time.Time, updatedAt time.Time) *IUserDTO {
	this := IUserDTO{}
	this.Id = id
	this.Username = username
	this.Email = email
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewIUserDTOWithDefaults instantiates a new IUserDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIUserDTOWithDefaults() *IUserDTO {
	this := IUserDTO{}
	return &this
}

// GetId returns the Id field value
func (o *IUserDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IUserDTO) SetId(v string) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *IUserDTO) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *IUserDTO) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *IUserDTO) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *IUserDTO) SetEmail(v string) {
	o.Email = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IUserDTO) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IUserDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *IUserDTO) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *IUserDTO) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *IUserDTO) GetDeletedAt() time.Time {
	if o == nil || o.DeletedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IUserDTO) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *IUserDTO) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *IUserDTO) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

func (o IUserDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	return json.Marshal(toSerialize)
}

type NullableIUserDTO struct {
	value *IUserDTO
	isSet bool
}

func (v NullableIUserDTO) Get() *IUserDTO {
	return v.value
}

func (v *NullableIUserDTO) Set(val *IUserDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIUserDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIUserDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIUserDTO(val *IUserDTO) *NullableIUserDTO {
	return &NullableIUserDTO{value: val, isSet: true}
}

func (v NullableIUserDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIUserDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


